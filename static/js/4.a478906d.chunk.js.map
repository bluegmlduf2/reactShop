{"version":3,"sources":["Detail.js"],"names":["Stock","props","stock_prop","Size","params","sizeInfo","useContext","sizeContext","id","useParams","join","Tabs","tabBtn","tabBtn_prop","tabAniUpd","tabAniUpd_prop","useEffect","connect","state","reducer","history","useHistory","useState","chk","chkUpd","tabBtnUpd","tabAni","timer","setTimeout","clearTimeout","console","log","박스","styled","div","제목","h4","userColor","className","style","visibility","src","parseInt","width","detail_prop","title","content","price","stockUpd_prop","onClick","dispatch","type","payload","push","goBack","variant","defaultActiveKey","Item","Link","eventKey","in","classNames","timeout"],"mappings":"mOAmHA,SAASA,EAAMC,GACX,OACI,gDAASA,EAAMC,cAIvB,SAASC,EAAKC,GACV,IAAIC,EAAWC,qBAAWC,KACpBC,EAAOC,cAAPD,GAEN,OACI,sDAAUH,EAASG,GAAIE,KAAK,QAIpC,SAASC,EAAKV,GACV,IAAIW,EAASX,EAAMY,YACfC,EAAYb,EAAMc,eAKtB,OAFAC,qBAAU,WAAQF,GAAU,MAEb,IAAXF,EACQ,kEACU,IAAXA,EACC,uEADL,EAsBIK,uBARf,SAA2BC,GAEvB,MAAO,CACHA,MAAOA,EAAMC,WAKNF,EAtJf,SAAgBhB,GACZ,IAAImB,EAAUC,cACRb,EAAOC,cAAPD,GAFa,EAGCc,oBAAS,GAHV,mBAGdC,EAHc,KAGTC,EAHS,OAIOF,mBAAS,GAJhB,mBAIdV,EAJc,KAINa,EAJM,OAKOH,oBAAS,GALhB,mBAKdI,EALc,KAKNZ,EALM,KAYfa,EAAQ,KAGZX,qBAAU,WAENW,OACIC,YAAW,WACPJ,GAAO,KACR,QAMXR,qBAAU,WACN,OAAOa,aAAaF,MAOxBX,qBAAU,WACNc,QAAQC,IAAI,KACb,IAGH,IAAIC,EAAKC,IAAOC,IAAV,mDAGFC,EAAKF,IAAOG,GAAV,qEAEE,SAAAnC,GAAK,OAAIA,EAAMoC,aASvB,OAEI,cADA,CACA,OAAKC,UAAU,YAAf,UACI,cAACN,EAAD,UACI,cAACG,EAAD,CAAIE,UAAW,OAAf,sBAMJ,qBAAKC,UAAU,YAAYC,MAAOhB,EAAM,CAAEiB,WAAY,WAAc,CAAEA,WAAY,UAAlF,SACI,8GAEJ,sBAAKF,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,qBAAKG,IAAK,6CAA+CC,SAASlC,GAAM,GAAK,OAAQmC,MAAM,WAE/F,sBAAKL,UAAU,gBAAf,UACI,oBAAIA,UAAU,OAAd,SAAsBrC,EAAM2C,YAAYpC,GAAIqC,QAC5C,4BAAI5C,EAAM2C,YAAYpC,GAAIsC,UAC1B,8BAAI7C,EAAM2C,YAAYpC,GAAIuC,MAA1B,YACA,cAAC/C,EAAD,CAAOE,WAAYD,EAAMC,WAAWM,GAAKwC,cAAe/C,EAAM+C,gBAC9D,cAAC7C,EAAD,IAEA,wBAAQmC,UAAU,iBAAiBW,QAAS,WACxChD,EAAMiD,SAAS,CAAEC,KAAM,UAAWC,QAASnD,EAAM2C,YAAYpC,KAC7DY,EAAQiC,KAAK,UAFjB,sCAIA,wBAAQf,UAAU,sBAAsBW,QAAS,WAC7C7B,EAAQkC,UADZ,4CAOR,eAAC,IAAD,CAAKC,QAAQ,OAAOC,iBAAiB,SAASlB,UAAU,OAAxD,UACI,cAAC,IAAImB,KAAL,UACI,cAAC,IAAIC,KAAL,CAAUC,SAAS,SAASV,QAAS,WAAQxB,EAAU,GAAIX,GAAU,IAArE,wCAEJ,cAAC,IAAI2C,KAAL,UACI,cAAC,IAAIC,KAAL,CAAUC,SAAS,SAASV,QAAS,WAAQxB,EAAU,GAAIX,GAAU,IAArE,2CAIR,cAAC,IAAD,CAAe8C,GAAIlC,EAAQmC,WAAW,UAAUC,QAAS,IAAzD,SACI,cAACnD,EAAD,CAAME,YAAaD,EAAQG,eAAgBD","file":"static/js/4.a478906d.chunk.js","sourcesContent":["/*eslint-disable*/\n//1.컴포넌트 js파일은 파일명 첫글자가 대문자이다 2.컴포넌트사용을위해 리액트라이브러리를 임포트\nimport { react, useEffect, useState, useContext } from 'react'; // let {}  = react() ..ES6의 신문법 Rest과 같다. 반환값중에 필요한 값만 변수로 선언하여 사용한다\nimport { useHistory, useParams } from 'react-router-dom'//1.페이지이동을위한 리액트 라우터 라이브러리 2.useParams 파라미터의 변수를 가져오기 위한 라이브러리\nimport styled from 'styled-components'; //1.styled-components 의 선언\nimport './Detail.scss'\nimport { sizeContext } from './App.js'//sizeContext 사용하기위해서 \nimport { Nav } from 'react-bootstrap';\nimport { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\n\nfunction Detail(props) {\n    let history = useHistory();//페이지이동라우터 초기화\n    let { id } = useParams();//{:파라미터..}\n    let [chk, chkUpd] = useState(true)\n    let [tabBtn, tabBtnUpd] = useState(1)\n    let [tabAni, tabAniUpd] = useState(false)\n    /* es6의 find를 사용한 방법\n    let 찾은상품 = props.shoes.find(function(상품){\n        return 상품.id == id\n    });\n     */\n\n    let timer = null\n\n    //HOOK 신문법. 1.컴포넌트가 등장(마운트)될때 & 재렌더링때 사용됨  //주로 AJAX통신을 넣기도함\n    useEffect(() => {\n        //settimeOut즉시실행함수\n        timer = (function () {\n            setTimeout(() => {\n                chkUpd(false)\n            }, 3000);\n        })()\n        //return ()=>{ clearTimeout(타이머) }\n    })\n\n    //HOOK 신문법. 2.컴포넌트가 사라질(언마운트)때 사용됨\n    useEffect(() => {\n        return clearTimeout(timer) //timer해제\n        // return function(){\n        //     alert('언마우트 HOOK')\n        // }\n    })\n\n    //HOOK 신문법. 3.컴포넌트가 최초 로드될때만 사용됨. 매개변수 useEffect(()=>{},[chk])는 chk가 업데이트될때 실행됨. [] 만 존재할시 최초 로드시에만 사용됨 \n    useEffect(() => {\n        console.log(1)\n    }, [])\n\n    /* styled-components를 사용하면 생기는 이점 1.CSS파일을 찾을 필요가 없다*/\n    let 박스 = styled.div`\n    padding:20px;\n    `\n    let 제목 = styled.h4`\n    font-size: 25px;\n    color:${props => props.userColor}\n    `\n\n    function changestock() {\n        let deepCopy = [...props.stock_prop]\n        deepCopy[id] = parseInt(props.stock_prop[id]) + 1\n        props.stockUpd_prop(deepCopy)\n    }\n\n    return (\n        // 부트스트랩 레이아웃기본, 1.container > 2.row 3.mt은 마진탑 \n        <div className=\"container\">\n            <박스>\n                <제목 userColor={\"gray\"}>\n                    Detail\n                </제목>\n            </박스>\n\n            {/* 아래의 if 문 사용이 좋은 관습 */}\n            <div className=\"my-alert1\" style={chk ? { visibility: \"visible\" } : { visibility: \"hidden\" }}>\n                <p>재고가 얼마 남지 않았습니다</p>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <img src={\"https://codingapple1.github.io/shop/shoes\" + (parseInt(id) + 1) + \".jpg\"} width=\"100%\" />\n                </div>\n                <div className=\"col-md-6 mt-4\">\n                    <h4 className=\"pt-5\">{props.detail_prop[id].title}</h4>\n                    <p>{props.detail_prop[id].content}</p>\n                    <p>{props.detail_prop[id].price}원</p>\n                    <Stock stock_prop={props.stock_prop[id]} stockUpd_prop={props.stockUpd_prop} />\n                    <Size></Size>\n                    {/* <button className=\"btn btn-danger\" onClick={changestock}>주문하기</button> */}\n                    <button className=\"btn btn-danger\" onClick={() => {\n                        props.dispatch({ type: \"addCart\", payload: props.detail_prop[id] });\n                        history.push('/cart')\n                    }}>주문하기</button>\n                    <button className=\"btn btn-danger ml-2\" onClick={() => {\n                        history.goBack()//뒤로가기\n                        //history.push('/')//해당 url로이동\n                    }}>뒤로가기</button>\n                </div>\n            </div>\n\n            <Nav variant=\"tabs\" defaultActiveKey=\"link-1\" className=\"mt-5\">\n                <Nav.Item>\n                    <Nav.Link eventKey=\"link-1\" onClick={() => { tabBtnUpd(1); tabAniUpd(false) }}>상품설명</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"link-2\" onClick={() => { tabBtnUpd(2); tabAniUpd(false) }}>배송정보</Nav.Link>\n                </Nav.Item>\n            </Nav>\n            {/* in={true} => 실행 */}\n            <CSSTransition in={tabAni} classNames=\"showAni\" timeout={500}>\n                <Tabs tabBtn_prop={tabBtn} tabAniUpd_prop={tabAniUpd} />\n            </CSSTransition>\n        </div>\n    );\n}\n\nfunction Stock(props) {\n    return (\n        <p>재고 : {props.stock_prop}</p>\n    );\n}\n\nfunction Size(params) {\n    let sizeInfo = useContext(sizeContext)\n    let { id } = useParams();//{:파라미터..}\n\n    return (\n        <p>사이즈 : {sizeInfo[id].join(',')}</p>\n    );\n}\n\nfunction Tabs(props) {\n    let tabBtn = props.tabBtn_prop\n    let tabAniUpd = props.tabAniUpd_prop\n\n    //클릭시마다 호출 (애니메이션)\n    useEffect(() => { tabAniUpd(true) })\n\n    if (tabBtn === 1) {\n        return (<div>첫번째 내용</div>)\n    } else if (tabBtn === 2) {\n        return (<div>두번째 내용</div>)\n    }\n}\n// HOOK -> Trriger\n// class Detail2 extends React.Component {\n//     componentDidMount(){\n//       //Detail2 컴포넌트가 Mount 되고나서 실행할 코드\n//     }\n//     componentWillUnmount(){\n//       //Detail2 컴포넌트가 Unmount 되기전에 실행할 코드\n//     }\n//   }\n\nfunction reduxStateToProps(state) {\n    //index.js에서 설정한 store(state)통채로 가져와서 Cart(props)함수의 props로 던짐 \n    return {\n        state: state.reducer\n    }\n}\n\n\nexport default connect(reduxStateToProps)(Detail)// A()()는 A의반환값이 함수인경우임.\n"],"sourceRoot":""}